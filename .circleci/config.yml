# to validate any changes
# use:
# circleci config process .circleci/config.yml > config_processed.yml
#
# and run any job locally with:
# circleci local execute -c config_processed.yml --job "firefox stable group"
version: 2.1
parameters:
  environment:
    type: enum
    enum: ["prod", "stage", "dev"]
    default: "stage"
  pr_workflow:    # runs for every pull request.
    type: boolean
    default: true # by default pr workflow will get executed.
  custom_workflow: # runs just one custom config.
    type: boolean
    default: false
  backend_workflow: # runs JS integration.
    type: boolean
    default: false
  tag:
    type: string
    default: "" # use something like: "2.0.0-beta15" when invoking with parameters.
  browser:
    type: enum
    enum: ["chrome", "firefox"]
    default: "chrome"
  bver:
    type: enum
    enum: ["stable", "beta", "unstable"]
    default: "stable"
  topology:
    type: enum
    enum: ["group", "peer-to-peer"]
    default: "group"
  test_stability: # should it run flaky tests?
    type: enum
    enum: ["all", "stable", "unstable"]
    default: "all"

defaultEnv: &defaultEnv
  ENVIRONMENT: << pipeline.parameters.environment >>
  ENABLE_REST_API_TESTS: "true"
executors:
  docker-with-browser:
    parameters:
      browser:
        type: enum
        enum: ["chrome", "firefox"]
        default: "chrome"
      bver:
        type: enum
        enum: ["stable", "beta", "unstable"]
        default: "stable"
    docker:
      - image: twilio/twilio-video-browsers:<<parameters.browser>>-<<parameters.bver>>
    environment:
      <<: *defaultEnv
  generic-executor:
    docker:
      - image: alpine:3.7
    environment:
      <<: *defaultEnv
  machine-executor:
    machine: true
    environment:
      <<: *defaultEnv
commands:
  get-code:
    steps:
      - checkout
      - when:
          condition: << pipeline.parameters.tag >>
          steps:
            - run: git checkout << pipeline.parameters.tag >>
  get-code-and-dependencies:
    steps:
      - get-code
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Installing dependencies
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
  save-test-results:
    steps:
      - store_test_results:
          path: ./logs
      - store_artifacts:
          path: ./logs
          prefix: tests
  build:
    steps:
      - get-code-and-dependencies
      - run:
          name: Building Quick
          command: npm run build:quick
      - store_artifacts:
          path: ./dist
          prefix: dist
  unit-tests:
    steps:
      - get-code-and-dependencies
      - run:
          name: Running Unit Tests
          command: npm run cover
      - store_artifacts:
          path: ./coverage
          prefix: coverage
  integration-tests:
    steps:
      - get-code-and-dependencies
      - run:
          name: Running Integration Tests (environment = << pipeline.parameters.environment >>)
          command: scripts/circleci-run-tests.sh
      - save-test-results
  network-tests:
    steps:
      - get-code # note: network tests run inside docker - the dependencies will be fetched inside docker image.
      - run:
          name: Running Network Tests (environment = << pipeline.parameters.environment >>)
          command: scripts/circleci-run-tests.sh
      - save-test-results
  framework-tests:
    steps:
      - build
      - run:
          name: Installing dependencies
          command: npm install
      - run:
          name: Running UMD Tests
          command: npm run test:umd
      - run:
          name: Running Framework Tests
          command: npm run test:framework
      - save-test-results
  echo-command:
    description: "marker command"
    parameters:
      to:
        type: string
        default: "Hello World"
    steps:
      - run: echo << parameters.to >>
jobs:
  Build:
    executor: docker-with-browser
    steps:
      - build
  UnitTests:
    executor: docker-with-browser
    steps:
      - unit-tests
  BuildComplete:
    executor: generic-executor
    steps:
      - echo-command:
          to: "Build Phase Complete!"
  BuildPassed:
    executor: generic-executor
    steps:
      - echo-command:
          to: "Build Passed!"
  run-integration-tests:
    parallelism: 6
    parameters:
      browser:
        type: string
      bver:
        type: string
      topology:
        type: enum
        enum: ["group", "peer-to-peer"]
        default: "group"
      test_stability:
        type: string
    environment:
      TOPOLOGY: << parameters.topology >>
      TEST_STABILITY: << parameters.test_stability >>
    executor:
      name: docker-with-browser
      browser: << parameters.browser >>
      bver: << parameters.bver >>
    steps: [integration-tests]
  run-network-tests:
    parameters:
      browser:
        type: string
      topology:
        type: string
      test_stability:
        type: string
    environment:
      NETWORK_TESTS: "true"
      BVER: "stable"
      BROWSER: << parameters.browser >>
      TOPOLOGY: << parameters.topology >>
      TEST_STABILITY: << parameters.test_stability >>
    executor: machine-executor
    steps: [network-tests]
  Framework-tests:
    environment:
      BROWSER: "chrome"
    executor: docker-with-browser
    steps: [framework-tests]
  Build-Docker-Test-Image:
    executor: machine-executor
    parameters:
      browser:
        type: string
      bver:
        type: string
    steps:
      - checkout
      - run:
          name: Building Docker Image
          command: .circleci/images/build_docker_image.sh
      - save-test-results
    environment:
      BROWSER: << parameters.browser >>
      BVER: << parameters.bver >>
  trigger-qe-tests:
    docker:
      - image: circleci/node:latest
    steps:
      - run:
          name: Trigger QE tests
          command: |
            curl --fail --write-out "\nHTTP Response Code: %{http_code}\n" \
            -u $CIRCLECI_PERSONAL_API_TOKEN: -X POST --header "Content-Type: application/json" \
            -d '{"branch":"'v${CIRCLE_TAG:0:1}'","parameters":{"sdk_version":"'$CIRCLE_TAG'","is_rc":true}}' \
            $SDKS_QE_CIRCLECI_VIDEO_JS_SLAVE_PIPELINE_ENDPOINT

workflows:
  version: 2
  Build_Docker_Images_Workflow:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - Build-Docker-Test-Image:
          matrix:
            parameters:
              browser: ["chrome", "firefox"]
              bver: ["stable", "unstable", "beta"]
  Custom_Workflow:
    when: << pipeline.parameters.custom_workflow >>
    jobs:
      - run-integration-tests:
          name: Integration(<< pipeline.parameters.test_stability >>) << pipeline.parameters.environment >> << pipeline.parameters.browser >>(<< pipeline.parameters.bver >>) << pipeline.parameters.topology >>
          browser: << pipeline.parameters.browser >>
          bver: << pipeline.parameters.bver >>
          topology: << pipeline.parameters.topology >>
          test_stability: << pipeline.parameters.test_stability >>
      - run-network-tests:
          name: Network(<< pipeline.parameters.test_stability >>) << pipeline.parameters.environment >> << pipeline.parameters.browser >> << pipeline.parameters.topology >>
          browser: << pipeline.parameters.browser >>
          topology: << pipeline.parameters.topology >>
          test_stability: << pipeline.parameters.test_stability >>

  Backend_Workflow:
    when: << pipeline.parameters.backend_workflow >>
    jobs:
      - run-integration-tests:
          name: << matrix.test_stability >> integration << matrix.topology >> tests << matrix.browser >>(<< matrix.bver >>)
          matrix:
            parameters:
              browser: ["chrome", "firefox"]
              bver: ["stable"]
              topology: ["group", "peer-to-peer"]
              test_stability: ["stable"]
      - run-network-tests:
          name: << matrix.test_stability >> network << matrix.topology >> tests on << matrix.browser >>
          matrix:
            parameters:
              browser: ["chrome", "firefox"]
              topology: ["group", "peer-to-peer"]
              test_stability: ["stable"]
  Pull_Request_Workflow:
    when: << pipeline.parameters.pr_workflow >>
    jobs:
      - Build
      - UnitTests
      - run-integration-tests:
          name: << matrix.test_stability >> integration << matrix.topology >> tests on << matrix.browser >>(<< matrix.bver >>)
          matrix:
            parameters:
              browser: ["chrome", "firefox"]
              bver: ["stable", "unstable", "beta"]
              topology: ["group", "peer-to-peer"]
              test_stability: ["stable"]
          requires: [Build, UnitTests]
      - run-integration-tests:
          name: << matrix.test_stability >> integration << matrix.topology >> tests on << matrix.browser >>(<< matrix.bver >>)
          matrix:
            parameters:
              browser: ["chrome", "firefox"]
              bver: ["stable"]
              topology: ["group", "peer-to-peer"]
              test_stability: ["unstable"]
          requires: [Build, UnitTests]
      - run-network-tests:
          name: << matrix.test_stability >> network << matrix.topology >> tests on << matrix.browser >>
          matrix:
            parameters:
              browser: ["chrome", "firefox"]
              topology: ["group", "peer-to-peer"]
              test_stability: ["stable", "unstable"]
          requires: [Build, UnitTests]
      - Framework-tests:
          name: "framework tests"
          requires: [Build, UnitTests]
  Release-candidate:
    jobs:
      - trigger-qe-tests:
          context: sdks-qe
          filters:
            tags:
              only:
                - /^\d+\.\d+\.\d+-rc\d+$/
                - /^\d+\.\d+\.\d+-preview\d+-rc\d+$/
                - /^\d+\.\d+\.\d+-beta\d+-rc\d+$/
                - /^\d+\.\d+\.\d+-rc\.\d+$/
                - /^\d+\.\d+\.\d+-preview\d+-rc\.\d+$/
                - /^\d+\.\d+\.\d+-beta\d+-rc\.\d+$/
            branches:
              ignore: /.*/
